!pip install yfinance==0.1.67
!mamba install bs4==4.10.0 -y
!pip install nbformat==4.2.0
//libraries
import yfinance as yf
import pandas as pd
import requests
from bs4 import BeautifulSoup
import plotly.graph_objects as go
from plotly.subplots import make_subplots
//graph function
def make_graph(stock_data, revenue_data, stock):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price", "Historical Revenue"), vertical_spacing = .3)
    stock_data_specific = stock_data[stock_data.Date <= '2021--06-14']
    revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']
    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data_specific.Date, infer_datetime_format=True), y=stock_data_specific.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data_specific.Date, infer_datetime_format=True), y=revenue_data_specific.Revenue.astype("float"), name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
    fig.update_layout(showlegend=False,
    height=900,
    title=stock,
    xaxis_rangeslider_visible=True)
    fig.show()
//Use yfinance to Extract Stock Data of tesla
tesla=yf.Ticker("TSLA")
tesla_data=tesla.history(period="max")
tesla_data.reset_index(inplace=True)
tesla_data.head()#data is showed for the stock of tesla
// Use Webscraping to Extract Tesla Revenue Data for tesla
url="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm"
html_data=requests.get(url).text
beautiful_soup=BeautifulSoup(html_data,'html.parser')
//data is iterated for the manipulatuon
tesla_dat = pd.DataFrame(columns=["Date", "Revenue"])

# First we isolate the body of the table which contains all the information
# Then we loop through each row and find all the column values for each row
for row in beautiful_soup.find("tbody").find_all('tr'):
    col = row.find_all("td")
    date = col[0].text
    REvenue=col[1].text
    
    # Finally we append the data of each row to the table
    tesla_dat = tesla_dat.append({"Date":date, "Revenue":REvenue}, ignore_index=True)  
#money signs are deleted
tesla_dat["Revenue"] = tesla_dat['Revenue'].str.replace(',|\$',"")
#remove all empty line
tesla_dat.dropna(inplace=True)
tesla_dat = tesla_dat[tesla_dat['Revenue'] != ""] 
tesla_dat.head #show the dataframe

# for te game stop
gme=yf.Ticker("GME")
gme_data=gme.history(period="max")
gme_data.reset_index(inplace=True)
gme.head

#for the data revenue  of game stop
url2="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html"
html_data=requests.get(url2).text
soup1=BeautifulSoup(html_data2,"html.parser")
gme_revenue=pd.DataFrame(columns=['date','revenue'])
for row in soup1.find("tbody").find_all("tr"):
    col=row.find_all("td")
    date=col[0].text
    revenue=col[1].text
    gme_revenue=gme_revenue.append({'date':date,'revenue':revenue},ignore_index=true)
gme_revenue['revenue']=gme_revenue['revenue'].str.replace(',|\$',"")
gme_replace.dropna(inplace=True)
gme_revenue=gme_revenue[gme_revenue['revenue']!=""]
gme_revenue.tail()

# to show the graph
make_graph(gme_dat,gme_revenue,'GameStop')
make_graph(tesla_data,tesla_dat,'Tesla')

